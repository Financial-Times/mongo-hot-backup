{{- if .Values.eksCluster }}
apiVersion: apps/v1
{{- else }}
apiVersion: extensions/v1beta1
{{- end }}
kind: Deployment
metadata:
  name: {{ .Values.service.name }}
  labels:
    chart: "{{ .Chart.Name | trunc 63 }}"
    chartVersion: "{{ .Chart.Version | trunc 63 }}"
    visualize: "true"
    app: {{ .Values.service.name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.service.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.service.name }}
        visualize: "true"
    spec:
{{- if .Values.eksCluster }}
      tolerations:
      # Making sure that Mongo will be scheduled on dedicated nodes. These nodes are tainted and labeled by the provisioner.
      - key: "mongo"
        operator: "Equal"
        value: "false"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: role
                operator: In
                values:
                - "mongo"
{{- else }}
      tolerations:
      # Making sure that Mongo will be scheduled on dedicated nodes. These nodes are tainted and labeled by the provisioner.
      - key: "dedicated"
        operator: "Equal"
        value: "mongo"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kube-aws.coreos.com/role
                operator: In
                values:
                - mongo-worker
{{- end }}
      imagePullSecrets:
        - name: nexusregistry
      containers:
      - name: {{ .Values.service.name }}
        image: "{{ .Values.image.repository }}:{{ .Chart.Version }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: MONGODB
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: mongo.addresses
        - name: S3_DOMAIN
          value: {{ .Values.service.s3Domain }}
        - name: S3_BUCKET
          value: {{ .Values.service.s3Bucket }}
        - name: S3_DIR
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: environment
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: global-secrets
              key: aws.access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: global-secrets
              key: aws.secret_access_key
        - name: MONGODB_COLLECTIONS
          value: {{ .Values.env.MONGODB_COLLECTIONS }}
        - name: CRON
          value: {{ .Values.service.cron }}
        - name: DBPATH
          value: /{{ .Values.service.volumeMountPath }}/state.db
        - name: RUN
          value: "false"
        - name: HEALTH_HOURS
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: mongo-hot-backup.health-hours
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: mongo-persistent-0
          mountPath: /{{ .Values.service.volumeMountPath }}
          subPath: {{ .Values.service.volumeMountPath }}
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 10
        readinessProbe:
          httpGet:
            path: "/__gtg"
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 30
        resources:
{{ toYaml .Values.resources | indent 12 }}
      volumes:
      - name: mongo-persistent-0
        persistentVolumeClaim:
          claimName: "mongodb-pvc-0"
